<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>6</title>
      <link href="/2023/11/22/6/"/>
      <url>/2023/11/22/6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5</title>
      <link href="/2023/11/22/5/"/>
      <url>/2023/11/22/5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4</title>
      <link href="/2023/11/22/4/"/>
      <url>/2023/11/22/4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3</title>
      <link href="/2023/11/22/3/"/>
      <url>/2023/11/22/3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2</title>
      <link href="/2023/11/22/2/"/>
      <url>/2023/11/22/2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1</title>
      <link href="/2023/11/22/1/"/>
      <url>/2023/11/22/1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> x </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FreeRTOS</title>
      <link href="/2023/11/20/FreeRTOS/"/>
      <url>/2023/11/20/FreeRTOS/</url>
      
        <content type="html"><![CDATA[<p><strong>==注==</strong> ：<strong>此教程代码笔记基于硬件家园，开发板是STM32ZET6。参考代码，请注意板子引脚</strong></p><h2 id="系统简介与移植"><a href="#系统简介与移植" class="headerlink" title="系统简介与移植"></a>系统简介与移植</h2><h3 id="FreeRTOS简介"><a href="#FreeRTOS简介" class="headerlink" title="FreeRTOS简介"></a>FreeRTOS简介</h3><h4 id="嵌入式操作系统"><a href="#嵌入式操作系统" class="headerlink" title="嵌入式操作系统"></a>嵌入式操作系统</h4><p>嵌入式操作系统是为了区别于通用的计算机操作系统，人们把嵌入到对象体系中，为实现对象体系智能化控制的计算机操作系统，称作嵌入式计算机操作系统，简称嵌入式操作系统。</p><p>嵌入式操作系统分类：<br>① 按对外部事件的响应能力来分类，嵌入式操作系统分实时操作系统和分时操作系统。</p><p>如果操作系统能及时的响应外部事件请求，并能控制所有实时设备和实时任务协调运行，且能在一个规定的时间内完成对事件的处理，那么这种系统就称为实时操作系统。</p><p>如果操作系统按时间片轮转完成各个任务，任务没有优先级，这种系统就称为分时操作系统。</p><p>② 按时间的严格程度来分，实时操作系统又分为强实时操作系统和弱实时操作系统。系统必须在极其严格的时间内完成的任务叫做硬实时操作系统，比如飞机系统；如果不是很严格的话就是弱实时操作系统，比如信息采集系统。</p><h4 id="FreeRTOS实时操作系统"><a href="#FreeRTOS实时操作系统" class="headerlink" title="FreeRTOS实时操作系统"></a>FreeRTOS实时操作系统</h4><p>FreeRTOS是一款开源免费的实时操作系统，商业使用的话不需要用户公开源代码，也不存在任何版权问题，是当前小型嵌入式操作系统市场使用率最高的。</p><p>FreeRTOS 的移植比较简单，只需要用户添加需要的源码文件，不需要做任何的底层工作，再添加几个宏定义即可，详情可以看第四节的手动移植FreeRTOS 操作系统。</p><h4 id="为什么选择FreeRTOS操作系统"><a href="#为什么选择FreeRTOS操作系统" class="headerlink" title="为什么选择FreeRTOS操作系统"></a>为什么选择FreeRTOS操作系统</h4><p>①  开源免费；</p><p>②  简单易学；</p><p>③ 在RTOS中占有率最高；</p><p>④ FreeRTOS被移植到了很多不同的微处理器，比如STM32，极为方便；</p><p>⑤ 许多半导体厂商产品的SDK采用FreeRTOS，比如WIFI与蓝牙模块；</p><p>⑥ 许多软件厂商使用FreeRTOS作为本公司软件的操作系统，比如TouchGFX；</p><h4 id="FreeRTOS特点"><a href="#FreeRTOS特点" class="headerlink" title="FreeRTOS特点"></a>FreeRTOS特点</h4><p>① 支持抢占式调度，合作式调度和时间片调度；</p><p>② 支持 35 种系统架构；</p><p>③ 设计的简单易用，典型的内核使用大小在 4k-9k；</p><p>④ 移植非常简单，代码主要用 C 编写；</p><p>⑤ 支持消息队列、二值信号量、计数信号量、递归信号量和互斥信号量、事件通知，可用于任务与任务间的消息传递和同步，任务与中断间的消息传递和同步；</p><p>⑥ 提供丰富的，配置好的工程例子；</p><p>⑦ 多个任务可以分配相同优先级，即支持时间片调度；</p><p>⑧  高效的软件定时器；</p><p>⑨ 强大的跟踪执行函数；</p><p>⑩ 任务优先级数量不限；</p><p>⑩① 任务的数量不限；</p><p>⑩② 开源免费  :yellow_heart: </p><h3 id="裸机系统与多任务系统"><a href="#裸机系统与多任务系统" class="headerlink" title="裸机系统与多任务系统"></a>裸机系统与多任务系统</h3><h4 id="裸机系统"><a href="#裸机系统" class="headerlink" title="裸机系统"></a>裸机系统</h4><p>裸机编程时，先初始化相关的硬件，然后让主程序在一个死循环里面不断的循环，顺序地处理各种事件。 对于紧急事件，采用中断功能进行快速响应。</p><p><strong>伪代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;头文件&gt;</span></span></span><br><span class="line"></span><br><span class="line">#变量定义</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//硬件初始化</span></span><br><span class="line">    <span class="built_in">Hardware_Init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//功能函数1</span></span><br><span class="line">        <span class="built_in">Fun_1</span>();</span><br><span class="line">        <span class="comment">//功能函数2</span></span><br><span class="line">        <span class="built_in">Fun_2</span>();</span><br><span class="line">        。。。        </span><br><span class="line">        <span class="comment">//功能函数n</span></span><br><span class="line">        <span class="built_in">Fun_n</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断函数1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ISR_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//中断任务</span></span><br><span class="line">&#125;</span><br><span class="line">。。。</span><br><span class="line"><span class="comment">//中断函数n</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ISR_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//中断任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议：</strong>对于工业与消费级产品，大部分采用裸机系统。采用硬件家园主推的面向对象编程思维和模块化编程技术，规范程序架构，采用结构体封装外设，程序方便阅读、修改与移植，提高开发效率的同时，降低维护程序的难度。</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231118213249776.png" alt="image-20231118213249776"></p><h4 id="多任务系统"><a href="#多任务系统" class="headerlink" title="多任务系统"></a>多任务系统</h4><p>相比于裸机系统，多任务系统的事件处理是在任务中完成的，对于紧急事件，同样采用中断功能进行快速响应。</p><p>多任务系统通常包含多个任务，彼此独立，方便编程。 同时，任务具有优先级，高优先级任务可以打断低优先级任务，系统的实时性进一步得到提高。</p><p><strong>伪代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;头文件&gt;</span></span></span><br><span class="line"></span><br><span class="line">#变量定义</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//硬件初始化</span></span><br><span class="line">    <span class="built_in">Hardware_Init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FreeRTOS初始化</span></span><br><span class="line">    <span class="built_in">FreeRTOS_Init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FreeRTOS启动，开始任务调度，不再返回</span></span><br><span class="line">    <span class="built_in">FreeRTOS_Start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务函数1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//无限循环，不能返回</span></span><br><span class="line">   <span class="keyword">for</span>( ; ; )</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//任务1处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"><span class="comment">//任务函数n</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">   <span class="comment">//无限循环，不能返回</span></span><br><span class="line">   <span class="keyword">for</span>( ; ; )</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//任务n处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断函数1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ISR_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//中断任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"><span class="comment">//中断函数n</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ISR_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//中断任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>引入操作系统后，在编程时不需要精心设计程序执行流，任务间不存在干扰，编程反而变得简单了。 </p><p>当然，系统需要占用一定的RAM与FLASH资源，如今的单片机，RAM与FLASH越来越大，为采用操作系统编程提供了便利。</p><h4 id="裸机系统与多任务系统对比"><a href="#裸机系统与多任务系统对比" class="headerlink" title="裸机系统与多任务系统对比"></a>裸机系统与多任务系统对比</h4><p>逻辑系统与多任务系统各自具有优势，在各自的领域都具有应用价值，不能简单的说孰优孰劣，掌握后，根据产品功能合理选择。</p><p>裸机系统：工业产品与消费级用的非常多，特别是低端的单片机，必须采用裸机系统，采用模块化技术，编程也可以很方便</p><p>多任务系统：适合单片机高端，功能复杂的产品，多任务管理，编程简单很多。</p><p>两者对比：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRscLcOaTlEHpQyOCiad01yicU9LQRIssNOFFFHgyq7TcsNoQ9mkrtc5nBQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h3 id="初学FreeRTOS准备工作"><a href="#初学FreeRTOS准备工作" class="headerlink" title="初学FreeRTOS准备工作"></a>初学FreeRTOS准备工作</h3><p>搭建开发环境</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231118213646926.png" alt="image-20231118213646926"></p><p>下载安装STM32CubeMX和Keil</p><h3 id="手动移植FreeRTOS"><a href="#手动移植FreeRTOS" class="headerlink" title="手动移植FreeRTOS"></a>手动移植FreeRTOS</h3><p><strong>第一步：</strong>官网下载或qq群下载FreeRTOS源码</p><p>官网网址：<a href="https://www.freertos.org">https://www.freertos.org</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsxFxIWo3xCZ2CXnl9ViaViaibRG5KRmr6BJYXk2PI1A4BuRQPOBSI4mnnA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第二步：</strong>准备基础工程 - 使用HAL05 - LED流水灯，延时时钟基准由SysTick改到TIM2，删除主循环内的代码</p><p><strong>原因：</strong>FreeRTOS操作系统使用SysTick作为基准时钟</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRstuRBUSjWMEReXsBOwv6KfyYQrERvB0n9icMf0hhx6ZMWgJ0vv9QXO1A/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第三步：</strong>将FreeROS源码添加至工程中，设置头文件路径，编译工程</p><p>① 将FreeRTOS源码复制到工程中， 另外，将portable与RVDS文件夹多余的文件删除</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsm9sH6zxuibD6SrevjLUtQnABMEPj8AQKdpT6b49KoicJUASU1icmyPwrw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsNIpN9LLEprNVH3NZlqFhzpmNV2XJn5GHMFkQsKMkUia3P0QRUfM1M7w/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRs0CktxVDiaIPP2q7ExW8G86mmmJ6GghW07LdSSB0u6CV6BtNnWX6QnmA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>② Keil工程新建2个Groups - FreeRTOS/Source与FreeRTOS/Port，同时添加相应的文件</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRs9GVBGVQ8ydDibV0Q6PkCKrOzhbEPB6f38mLdibZRtvaOgjcqON5J0UXw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>③ 添加头文件路径</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsF6LgSQLpq712a3HxUNkD7ibwDUIphmSQiaVQiaDuohHbY2nc1nhOFticuw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>④ 编译工程</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsrQKFxwvVO2bMBOACT3uQIJcyFUYkHEK1oGCNAcDJicM97PKqsCIvH8A/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第四步：</strong>将FreeRTOSConfig.h文件(位于Demo - CORTEX_STM32F103_Keil工程中)添加至工程的MyApplication文件内， 方便打开与修改，同时添加至MyApplication文件组内，再次编译</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsjEYRn3ic2ykty4ic2KZEdBQJ8TBpkjLZS2iaJ7tC0rAJb7NxB7wFFgWtQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第五步：</strong>修改FreeRTOSConfig.h文件，是stm32f1xx_it.c文件，编译ok</p><p>① 修改FreeRTOSConfig.h文件，并编译</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsjrbpkAqJ5RKwzs65DA1zwGICfHNdOzGJ5j61h7PBQbf7C6c4pMiaPlQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>② 注释掉stm32f1xx_it.c文件的SVC，PendSV，Systick中断函数，编译ok</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsLLpj6Qh0Vt0OhINf7Bjzic0StVtkVdo4KCah0TP2n1HTCJJQsvaPvicA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第六步：</strong>工程添加MyTask.c文件，里面预先写好了3个任务，同时MyApplicatin.h头文件添加FreeRTOS与MyTask的头文件，编译ok</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsl9w0Box5aM4D3kP5EOhdtM2nUZCgotYXiaiapxmVtgtcA7hAp68oEtrA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsicibEowSeox2BFe3O6Zj0c0qP2xpiazI4WXhPQz2uhuTJ6KBMwfWg0lNA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>第七步：在main.c文件调用任务创建函数与系统调度函数，编译ok。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsr5w3PmNSUgOW2aVYq6Ths32DZtkjcANQdpDcEeZPB52gaCeibpicrcZA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>第八步：将程序下载至STM32物联网实战板，正常运行。</p><p>LED1 - 间隔100ms 闪烁</p><p>LED2 - 间隔500ms 闪烁</p><p>LED3 - 间隔1000ms闪烁</p><p><strong>至此，手动移植完成。</strong></p><h3 id="STM32CubeMX生成FreeRTOS"><a href="#STM32CubeMX生成FreeRTOS" class="headerlink" title="STM32CubeMX生成FreeRTOS"></a>STM32CubeMX生成FreeRTOS</h3><p><strong>第二步：</strong>准备基础工程 - 使用HAL05 - LED流水灯，延时时钟基准由SysTick改到TIM2</p><p><strong>原因：</strong>FreeRTOS操作系统使用SysTick作为基准时钟</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRstuRBUSjWMEReXsBOwv6KfyYQrERvB0n9icMf0hhx6ZMWgJ0vv9QXO1A/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第三步：</strong>左侧选择Middleware选项卡，点击FERRRTOS，Interface选择CMSIS_V1，配置参数默认即可。</p><p>说明：</p><p>Disable   - 禁用FreeRTOS</p><p>CMSIS_V1 - CMSIS-RTOS版本为V1.02，一般选择这个</p><p>CMSIS_V2 - CMSIS-RTOS版本为V2.00，兼容更多的CPU架构，但代码量更大</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsd1DWicWB5XNCWxAKqoaGVrbWsVicTa42mAoiaod0Kmv6pTzITmuTo1yKg/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第四步：</strong>选择Tasks and Queue，修改默认任务defaultTask(双击进入编辑任务界面)，并额外添加LED2与LED3任务。</p><p>说明：</p><p>编辑任务时，软件要求不同位置不能使用同样的名称，因为任务名称设定为LED1_Task,任务函数设定为LED1</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsUYGibsIQNSnsXNAJf1X6lWtxN46V8cj1WUiczBKRDtryKiaficAxbxtS6Q/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsQksXuNwLKqLQjqpIAkFpddiazMsUCmbvJjdYH67ibdDS6X6b9MZCzzaQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第四步：</strong>保存工程，并生产代码，删除主循环内的代码，编译keil工程</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsMMHLpAgnWoToCjryoHaCQjPDSk4NKQicah1xnfUvmiaQZicTfkDv2U7Pg/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsW3PgFkaZib8et1hNZYE4E3x98wTpXpkCCJLk0Y1g0KG15fTVicYhxCcA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第五步：</strong>打开freertos.c文件，在LED1、LED2、LED3函数内添加代码，编译ok</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsUCr7X79VZG48trOgZ7zoDHTHfkoAEfHAyADWN0L7B2Tibibus0Wl9laQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRssicwyxDCicEJ1STfOooAZ10JoSK8icxr3ERzGn76yyUGzOyJ5DM8VcgmA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZfayCCx3llw3QQczYKLticRsWIf5AyWoubt2mLBUaJiaXgVLkYII5ES1Ha5nCdQx2ibMwUGMdSdCJ48A/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>第六步：</strong>将程序下载至STM32物联网实战板，正常运行。</p><p>LED1 - 间隔100ms 闪烁</p><p>LED2 - 间隔500ms 闪烁</p><p>LED3 - 间隔1000ms闪烁</p><h2 id="启动流程、编码风格与调试方法"><a href="#启动流程、编码风格与调试方法" class="headerlink" title="启动流程、编码风格与调试方法"></a>启动流程、编码风格与调试方法</h2><h3 id="FreeRTOS启动流程"><a href="#FreeRTOS启动流程" class="headerlink" title="FreeRTOS启动流程"></a>FreeRTOS启动流程</h3><p>RTOS主要有两种比较流行的启动方式，下面会通过伪代码讲解两种启动方式的区别，然后看看STM32cubeMX集成的FreeRTOS采用哪种启动方式。</p><p>方法一：在main函数中将硬件初始化、RTOS系统初始化，同时创建所有任务，再启动RTOS调度器。</p><p><strong>伪代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;头文件&gt;</span></span></span><br><span class="line"></span><br><span class="line">#变量定义</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//硬件初始化</span></span><br><span class="line">    <span class="built_in">Hardware_Init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RTOS初始化</span></span><br><span class="line">    <span class="built_in">RTOS_Init</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建任务1</span></span><br><span class="line">   <span class="built_in">RTOS_TaskCreate</span>(Task_n);</span><br><span class="line"></span><br><span class="line">   。。。</span><br><span class="line">   <span class="comment">//创建任务n</span></span><br><span class="line">   <span class="built_in">RTOS_TaskCreate</span>(Task_n);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//RTOS启动，开始任务调度，不再返回</span></span><br><span class="line">   <span class="built_in">RTOS_Start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务函数1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//无限循环，不能返回</span></span><br><span class="line">   <span class="keyword">for</span>( ; ; )</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//任务1处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"><span class="comment">//任务函数n</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">   <span class="comment">//无限循环，不能返回</span></span><br><span class="line">   <span class="keyword">for</span>( ; ; )</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//任务n处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法二：在main函数中将硬件初始化、RTOS系统初始化，只创建一个启动任务，再启动RTOS调度器。 之后，在启动任务中创建各种应用任务，当所有任务创建完成，启动任务把自己删除。</p><p><strong>伪代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;头文件&gt;</span></span></span><br><span class="line"></span><br><span class="line">#变量定义</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//硬件初始化</span></span><br><span class="line">    <span class="built_in">Hardware_Init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RTOS初始化</span></span><br><span class="line">    <span class="built_in">RTOS_Init</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建任务1</span></span><br><span class="line">   <span class="built_in">RTOS_TaskCreate</span>(AppTaskCreate);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//RTOS启动，开始任务调度，不再返回</span></span><br><span class="line">   <span class="built_in">RTOS_Start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//起始任务，在里面创建各种应用任务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AppTaskCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//创建任务1</span></span><br><span class="line">   <span class="built_in">RTOS_TaskCreate</span>(Task_n);</span><br><span class="line"></span><br><span class="line">   。。。</span><br><span class="line">   <span class="comment">//创建任务n</span></span><br><span class="line">   <span class="built_in">RTOS_TaskCreate</span>(Task_n);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建完应用任务，删除自身，释放内存</span></span><br><span class="line">   <span class="built_in">RTOS_TaskDelate</span>(AppTaskCreate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务函数1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//无限循环，不能返回</span></span><br><span class="line">   <span class="keyword">for</span>( ; ; )</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//任务1处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"><span class="comment">//任务函数n</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_n</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">   <span class="comment">//无限循环，不能返回</span></span><br><span class="line">   <span class="keyword">for</span>( ; ; )</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//任务n处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>STM32cubeMX集成的FreeRTOS如下图，采用的是第一种启动方式。</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119203004873.png" alt="image-20231119203004873"></p><h3 id="FreeRTOS编码风格"><a href="#FreeRTOS编码风格" class="headerlink" title="FreeRTOS编码风格"></a>FreeRTOS编码风格</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>如下图，FreeRTOS使用的数据类型虽然都是标准C的数据类型，但都进行了重定义，取了个新名字。</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119203315563.png" alt="image-20231119203315563"></p><p>需要注意的是，char数据类型可以通过keil指定了有符号或者无符号，默认为无符号。</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119203434375.png" alt="image-20231119203434375"></p><h4 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h4><p>在FreeRTOS中，定义变量时，把变量的类型作为前缀，方便用户通过变量即可知道变量的类型。  </p><p>char变量的前缀是c，short变量的前缀是s，long变量的前缀是l，其它比如结构体、任务句柄等是x； </p><p>如果是无符号类型的，前缀再加u；</p><p>如果是指针变量，前缀再加p。</p><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>   cTemp</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>    ucTemp</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>*   pucTemp</span><br></pre></td></tr></table></figure><h4 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h4><p>函数名包含了函数返回值的类型、函数所在的文件名以及函数的功能，如果是私有的函数，还会加prv前缀。   这种命名方式方便寻找函数定义并了解函数作用，值得借鉴。</p><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">x <span class="title">TaskCreate</span><span class="params">()</span> <span class="comment">//函数的返回值为任务句柄，在Task.c中定义，作用是创建任务；</span></span></span><br><span class="line"><span class="function">v <span class="title">TaskPrioritySet</span><span class="params">()</span> <span class="comment">//函数的返回值为void，在Task.c中定义，作用是设置优先级；</span></span></span><br></pre></td></tr></table></figure><h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4><p>在FreeRTOS中，宏用大写字母表示，并配有小写字母作为前缀， 前缀用于指示该宏在哪个头文件定义。</p><p>举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">portMAX_DELAY,  <span class="comment">//位于portable.h；</span></span><br><span class="line">configUSE_PREEMPTION, <span class="comment">//位于FreeRTOSConfig.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此外，有几个通用的宏定义贯穿FreeRTOS的整个代码，都是表示0与1的宏，如下：</span></span><br><span class="line">pdTRUE    <span class="number">1</span></span><br><span class="line">pdFALSE   <span class="number">0</span></span><br><span class="line">pdPASS    <span class="number">1</span></span><br><span class="line">pdFAIL     <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="FreeRTOS调试方法"><a href="#FreeRTOS调试方法" class="headerlink" title="FreeRTOS调试方法"></a>FreeRTOS调试方法</h3><p>本节为大家介绍FreeRTOS的调试方法，主要是获取任务的执行情况，通过串口打印出来，方便后续的系统配置与优化工程，非常实用。</p><p>1、串口打印调试说明</p><p>为了了解任务的运行状态、任务栈的使用情况以及各个任务的 CPU 使用率，需要用到官方提供的两个函数 vTaskList 和 vTaskGetRunTimeStats。</p><p>用户可以通过这两个函数获得任务信息，然后通过串口将其打印出来，当然，也可以通过任何其它方式将其显示出来。后续课程统一采用串口打印的方式显示任务信息。</p><p>2、定时器</p><p>为了获取 FreeRTOS 的任务信息，需要创建一个定时器，这个定时器的时间基准精度要高于系统时钟节拍，达到系统时钟节拍的10 ~ 20倍，这样得到的任务信息才准确。</p><p><strong>Note：</strong></p><p>① <strong>==这种调试方式仅限调试、测试，实际项目中不要使用，因为这种测试方式比较影响系统实时性==</strong></p><p>② FreeRTOS 的系统内核没有对计数时间做溢出保护。 比如定时器周期为50us，最大支持计数时间：2^32 * 50us / 3600s =59.6 分钟。运行时间超过了 59.6 分钟将不准确。</p><p>3、具体实现</p><p>学习FreeRTOS操作系统的目的是利用多任务功能更好的管理产品外设，因此调试代码将在STM32物联网实战项目HAL裸机开发整合代码工程上启用FreeRTOS操作系统，因为最后一讲包含了全部外设驱动函数，方便后续的调用。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oW8ase0FDPy3QC7xVWHcFrPsAejiaFMniasYibKU4m9LxWzR4KwxiaD7T2g/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>①、处理工程代码 - 删除裸机框架的代码(main.c，MyInit.c,callback.c与System.c文件)，系统运行指示灯关闭；</p><p>②、STM32CubeMX配置</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1obhaBhFeD0ib1Yo3vqM17YbzaIDs88L0DnNNschFUVctfEBHSg2COJhg/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1obheW2nks0qxZwCrozmpEltAu2WfBVnSIcMKW4atnI11N6R2VCK8K2w/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oAe6Mt0p0cZWNvOL4oBIubvficQXdrWxVI57DRZ92uY4TtiakNNRHialnA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oQtbnWoBwtzfaJ0VgnTy8oH7KPLBGicxjZu9wRHZzEoZm2d08vibEz6Ng/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oDQpG2mCuR8iatrh4xna5C2Z9jgxDaGQTPC0Xnpb3v94TZTddLMUWHBg/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1o8HkML6r6xkckiapLNKza0JHDuiboicc4ZWvh6v9oIhhSPNTic4MGntvz0Q/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>③、完善keil工程代码</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oxOU9eX0IiazDrmWwRzS18iauQtFjQJdav3T77hYt2WOmXqvpnShiaOptQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1o09Zw7N1uwFbuHibGfEO1PG3a1o7krorfUb2IZicouJeibmjFsia5BSzJiaA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oUWjgVpDTnCRkwuvo7PSRbZkepyMicvI02KqZYs07xibDq9dMkSXI1ibCw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oBOctviaVhZtPq9cHMFZyT7NtZ8cbBSiaw86WfTo96icI66k5rORqacRiaQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdxOQmSIHnbiasBkJXLTibj1oRHTTicIjzwSHfsRQltjxLDpbV3p0sJLROibQW6qhoIJIwpbGCAYRlFeA/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="系统配置说明"><a href="#系统配置说明" class="headerlink" title="系统配置说明"></a>系统配置说明</h3><p>实际应用FreeRTOS的时候，我们需要根据产品需求配置FreeRTOS，满足产品需求的同时，发挥FreeRTOS的最佳性能。</p><p>FreeRTOS的系统配置文件为FreeRTOSConfig.h，在此配置文件中可完成FreeRTOS的裁剪与配置。 <strong>初学的话，有个大概了解即可，随着后续的深入学习，再熟练设置每个配置选项。</strong></p><p>FreeRTOSConfig.h 根据正在构建的应用程序定制 FreeRTOS 内核。因此，它特定于应用程序，而不是 FreeRTOS，并且应该位于应用程序目录中，而不是位于 FreeRTOS 内核源代码目录中。</p><p>另外，大部分配置选项在FreeRTOS.h文件中都有默认的配置，在应用时，把需要的配置选项放在FreeRTOSConfig.h文件即可。</p><p>关于系统配置，官网也有详细介绍</p><p>网址：<a href="http://www.freertos.org/a00110.html">http://www.freertos.org/a00110.html</a></p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119221626682.png" alt="image-20231119221626682"></p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119221646921.png" alt="image-20231119221646921"></p><h3 id="“Config”开始的宏-内核配置"><a href="#“Config”开始的宏-内核配置" class="headerlink" title="“Config”开始的宏 - 内核配置"></a>“Config”开始的宏 - 内核配置</h3><p>STM32cubeMX中的配置：</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119221723257.png" alt="image-20231119221723257"></p><h4 id="1、configUSE-PREEMPTION"><a href="#1、configUSE-PREEMPTION" class="headerlink" title="1、configUSE_PREEMPTION"></a>1、<strong>configUSE_PREEMPTION</strong></h4><p> 配置为 1 </p><p>使能抢占式调度器</p><p> 配置为 </p><p>0 使能合作式调度器</p><h4 id="2、configUSE-PORT-OPTIMISED-TASK-SELECTION"><a href="#2、configUSE-PORT-OPTIMISED-TASK-SELECTION" class="headerlink" title="2、configUSE_PORT_OPTIMISED_TASK_SELECTION"></a>2、<strong>configUSE_PORT_OPTIMISED_TASK_SELECTION</strong></h4><p>此配置用于优化优先级列表中要执行的最高优先级任务的算法。对 CM 内核的移植文件，默认已经在文件 portmacro.h 文件中使能。</p><p> 通用方式—-配置为 0： </p><p> 所有平台的移植文件都可以配置为 0，因为这是通用方式。 </p><p> 纯 C 编写，比专用方式效率低。</p><p> 可用的优先级数量不限制。</p><p> 专用方式—-配置为 1： </p><p> 部分平台支持。</p><p> 这些平台架构有专用的汇编指令，比如 CLZ（Count Leading Zeros）指令，通过这些指令可以加快算法执行速度。 </p><p> 比通用方式高效。</p><p> 有最大优先级数限制，通常限制为 32 个。</p><h4 id="3、configUSE-TICKLESS-IDLE"><a href="#3、configUSE-TICKLESS-IDLE" class="headerlink" title="3、configUSE_TICKLESS_IDLE"></a>3、<strong>configUSE_TICKLESS_IDLE</strong></h4><p>此配置用于使能 tickless 低功耗模式</p><p> 配置为 1</p><p>使能 tickless 低功耗模式</p><p> 配置为 0</p><p>禁能 tickless 低功耗模式</p><h4 id="4、configCPU-CLOCK-HZ"><a href="#4、configCPU-CLOCK-HZ" class="headerlink" title="4、configCPU_CLOCK_HZ"></a>4、<strong>configCPU_CLOCK_HZ</strong></h4><p>此参数用于定义 CPU 的主频，单位 Hz</p><h4 id="5、configTICK-RATE-HZ"><a href="#5、configTICK-RATE-HZ" class="headerlink" title="5、configTICK_RATE_HZ"></a>5、<strong>configTICK_RATE_HZ</strong></h4><p>此参数用于定义系统时钟节拍数，单位 Hz，一般取 1000Hz 即可。本教程配套的例子也全部采用这个时钟节拍数。过高的的系统时钟节拍将使得 FreeRTOS 内核运行占用过多的时间，增加系统负荷</p><h4 id="6、configMAX-PRIORITIES"><a href="#6、configMAX-PRIORITIES" class="headerlink" title="6、configMAX_PRIORITIES"></a>6、<strong>configMAX_PRIORITIES</strong></h4><p>此参数用于定义可供用户使用的最大任务优先级数，如果这个定义的是 5，那么用户可以使用的优先级号是 0,1,2,3,4，不包含 5，对于这一点，初学者要特别的注意。 </p><h4 id="7、configMINIMAL-STACK-SIZE"><a href="#7、configMINIMAL-STACK-SIZE" class="headerlink" title="7、configMINIMAL_STACK_SIZE"></a>7、<strong>configMINIMAL_STACK_SIZE</strong></h4><p>此参数用于定义空闲任务的栈空间大小，单位字，即 4 字节。</p><h4 id="8、configTOTAL-HEAP-SIZE"><a href="#8、configTOTAL-HEAP-SIZE" class="headerlink" title="8、configTOTAL_HEAP_SIZE"></a>8、<strong>configTOTAL_HEAP_SIZE</strong></h4><p>定义堆大小，FreeRTOS 内核，用户动态内存申请，任务栈，任务创建，信号量创建，消息队列创建等都需要用这个空间。</p><h4 id="9、configMAX-TASK-NAME-LEN"><a href="#9、configMAX-TASK-NAME-LEN" class="headerlink" title="9、configMAX_TASK_NAME_LEN"></a>9、<strong>configMAX_TASK_NAME_LEN</strong></h4><p>定义任务名最大的字符数，末尾的结束符 ‘\0’也要计算在内。</p><h4 id="10、configUSE-16-BIT-TICKS"><a href="#10、configUSE-16-BIT-TICKS" class="headerlink" title="10、configUSE_16_BIT_TICKS"></a>10、<strong>configUSE_16_BIT_TICKS</strong></h4><p>系统时钟节拍计数使用 TickType_t 数据类型定义的。</p><p>如果用户使能了宏定义 configUSE_16_BIT_TICKS，那么 TickType_t 定义的就是 16 位无符号数，如 果没有使能，那么 TickType_t 定义的就是 32 位无符号数。对于 32 位架构的处理器，一定要禁止此宏定义，即设置此宏定义数值为 0 即可。而 16 位无符号数类型主要用于 8 位和 16 位架构的处理器。</p><h4 id="11、configIDLE-SHOULD-YIELD"><a href="#11、configIDLE-SHOULD-YIELD" class="headerlink" title="11、configIDLE_SHOULD_YIELD"></a>11、<strong>configIDLE_SHOULD_YIELD</strong></h4><p>此参数用于使能与空闲任务同优先级的任务，只有满足以下两个条件时，此参数才有效果：</p><p>\1. 使能抢占式调度器。</p><p>\2. 有创建与空闲任务同优先级的任务。</p><p>配置为 1，就可以使能此特性了，实际应用中不建议用户使用此功能，将其配置为 0 即可。</p><h4 id="12、configUSE-TASK-NOTIFICATIONS"><a href="#12、configUSE-TASK-NOTIFICATIONS" class="headerlink" title="12、configUSE_TASK_NOTIFICATIONS"></a>12、<strong>configUSE_TASK_NOTIFICATIONS</strong></h4><p> 配置为 1</p><p>使能任务间直接的消息传递，包含信号量，事件标志组和消息邮箱。 </p><p> 配置为 0</p><p>禁能此特性。</p><h4 id="13、configUSE-MUTEXES"><a href="#13、configUSE-MUTEXES" class="headerlink" title="13、configUSE_MUTEXES"></a>13、<strong>configUSE_MUTEXES</strong></h4><p> 配置为 1</p><p>使能互斥信号量</p><p> 配置为 0</p><p>禁能互斥信号量</p><h4 id="14、configUSE-RECURSIVE-MUTEXES"><a href="#14、configUSE-RECURSIVE-MUTEXES" class="headerlink" title="14、configUSE_RECURSIVE_MUTEXES"></a>14、<strong>configUSE_RECURSIVE_MUTEXES</strong></h4><p> 配置为 1</p><p>使能递归互斥信号量</p><p> 配置为 0</p><p>禁能递归互斥信号量</p><h4 id="15、configUSE-COUNTING-SEMAPHORES"><a href="#15、configUSE-COUNTING-SEMAPHORES" class="headerlink" title="15、configUSE_COUNTING_SEMAPHORES"></a>15、<strong>configUSE_COUNTING_SEMAPHORES</strong></h4><p> 配置为 1</p><p>使能计数信号量</p><p> 配置为 0</p><p>禁能计数信号量</p><h4 id="16、configQUEUE-REGISTRY-SIZE"><a href="#16、configQUEUE-REGISTRY-SIZE" class="headerlink" title="16、configQUEUE_REGISTRY_SIZE"></a>16、<strong>configQUEUE_REGISTRY_SIZE</strong></h4><p>通过此定义来设置可以注册的信号量和消息队列个数。队列注册有两个目的，这两个目的都与内核调试有关：</p><p> 注册队列的时候，可以给队列起一个名字，当使用调试组件的时候，通过名字可以很容易的区分不同队列</p><p> 通过队列的相关信息，调试器可以很容易定位队列和信号量，能够定位信号量是因为 FreeRTOS 信号量也是基于队列实现的。当然，如果用户没有使用内核方面的调试器，这个宏定义是没有意义的。</p><h4 id="17、configUSE-QUEUE-SETS"><a href="#17、configUSE-QUEUE-SETS" class="headerlink" title="17、configUSE_QUEUE_SETS"></a>17、<strong>configUSE_QUEUE_SETS</strong></h4><p> 配置为 1</p><p>使能消息队列。</p><p> 配置为 0</p><p>禁能消息队列。</p><h4 id="18、configUSE-TIME-SLICING"><a href="#18、configUSE-TIME-SLICING" class="headerlink" title="18、configUSE_TIME_SLICING"></a>18、<strong>configUSE_TIME_SLICING</strong></h4><p> 配置为 1</p><p>使能时间片调度。</p><p> 配置为 0</p><p>禁能时间片调度。</p><p> 用户没有配置此选项如果用户没有配置此选项</p><p>默认在 FreeRTOS.h 文件中已经配置为 1，即使能时间片调度。</p><h3 id="“Config”开始的宏-其他配置"><a href="#“Config”开始的宏-其他配置" class="headerlink" title="“Config”开始的宏 - 其他配置"></a>“Config”开始的宏 - 其他配置</h3><p>STM32cubeMX中的配置：</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119221804305.png" alt="image-20231119221804305"></p><p>钩子函数配置：</p><p>钩子函数的主要功能是用于函数的扩展，用户可以根据自己的需要往里面添加相关的测试函数。</p><h4 id="configUSE-IDLE-HOOK"><a href="#configUSE-IDLE-HOOK" class="headerlink" title="configUSE_IDLE_HOOK"></a><strong>configUSE_IDLE_HOOK</strong></h4><p> 配置为 1</p><p>使能空闲任务的钩子函数</p><p> 配置为 0</p><p>禁能空闲任务钩子函数</p><h4 id="configUSE-MALLOC-FAILED-HOOK"><a href="#configUSE-MALLOC-FAILED-HOOK" class="headerlink" title="configUSE_MALLOC_FAILED_HOOK"></a><strong>configUSE_MALLOC_FAILED_HOOK</strong></h4><p>当创建任务，信号量或者消息队列时，FreeRTOS 通过函数 pvPortMalloc()申请动态内存。</p><p> 配置为 1</p><p>使能动态内存申请失败时的钩子函数</p><p> 配置为 0</p><p>禁能动态内存申请失败时的钩子函数</p><h4 id="configUSE-TICK-HOOK"><a href="#configUSE-TICK-HOOK" class="headerlink" title="configUSE_TICK_HOOK"></a><strong>configUSE_TICK_HOOK</strong></h4><p> 配置为 1</p><p>使能滴答定时器中断里面执行的钩子函数</p><p> 配置为 0</p><p>禁能滴答定时器中断里面执行的钩子函数</p><h4 id="configCHECK-FOR-STACK-OVERFLOW"><a href="#configCHECK-FOR-STACK-OVERFLOW" class="headerlink" title="configCHECK_FOR_STACK_OVERFLOW"></a><strong>configCHECK_FOR_STACK_OVERFLOW</strong></h4><p>FreeRTOS 的栈溢出检测支持两种方法，为了方便描述，我们这里将其称之为方法一和方法二。</p><p> 配置为 2</p><p>栈溢出检测使用方法二。</p><p> 配置为 1</p><p>栈溢出检测使用方法一。</p><p> 配置为 0</p><p>禁止栈溢出检测。</p><p>任务运行信息获取配置：</p><h4 id="configGENERATE-RUN-TIME-STATS"><a href="#configGENERATE-RUN-TIME-STATS" class="headerlink" title="configGENERATE_RUN_TIME_STATS"></a><strong>configGENERATE_RUN_TIME_STATS</strong></h4><p> 配置为 1</p><p>使能任务运行状态参数统计。</p><p> 配置为 0</p><p>禁止此特性。</p><h4 id="configUSE-TRACE-FACILITY"><a href="#configUSE-TRACE-FACILITY" class="headerlink" title="configUSE_TRACE_FACILITY"></a><strong>configUSE_TRACE_FACILITY</strong></h4><p> 配置为 1</p><p>使能此配置将添加额外的结构体成员和函数，以此来协助可视化和跟踪</p><p> 配置为 0</p><p>禁能此特性。</p><h4 id="configUSE-STATS-FORMATTING-FUNCTIONS"><a href="#configUSE-STATS-FORMATTING-FUNCTIONS" class="headerlink" title="configUSE_STATS_FORMATTING_FUNCTIONS"></a><strong>configUSE_STATS_FORMATTING_FUNCTIONS</strong></h4><p>用户配置宏定义 configUSE_TRACE_FACILITY 和 configUSE_STATS_FORMATTING_FUNCTIONS都为 1 的时候，将使能函数 vTaskList() 和 vTaskGetRunTimeStats()，如果两者中任何一个为 0，那么这两个函数都将被禁能。</p><p>合作式任务配置：</p><h4 id="configUSE-CO-ROUTINES"><a href="#configUSE-CO-ROUTINES" class="headerlink" title="configUSE_CO_ROUTINES"></a><strong>configUSE_CO_ROUTINES</strong></h4><p> 配置为 1</p><p>使能合作式调度相关函数。</p><p> 配置为 0</p><p>禁能合作式调度相关函数。</p><h4 id="configMAX-CO-ROUTINE-PRIORITIES"><a href="#configMAX-CO-ROUTINE-PRIORITIES" class="headerlink" title="configMAX_CO_ROUTINE_PRIORITIES"></a><strong>configMAX_CO_ROUTINE_PRIORITIES</strong></h4><p>此参数用于定义可供用户使用的最大的合作式任务优先级数，如果这个定义的是 5，那么用户可以使用的优先级号是 0,1,2,3,4，不包含 5，对于这一点，初学者要特别的注意。</p><p>软件定时器配置：</p><h4 id="configUSE-TIMERS"><a href="#configUSE-TIMERS" class="headerlink" title="configUSE_TIMERS"></a><strong>configUSE_TIMERS</strong></h4><p> 配置为 1使能软件定时器。 </p><p> 配置为 0禁能软件定时器。</p><h4 id="configTIMER-TASK-PRIORITY"><a href="#configTIMER-TASK-PRIORITY" class="headerlink" title="configTIMER_TASK_PRIORITY"></a><strong>configTIMER_TASK_PRIORITY</strong></h4><p>配置软件定时器任务的优先级。</p><h4 id="configTIMER-QUEUE-LENGTH"><a href="#configTIMER-QUEUE-LENGTH" class="headerlink" title="configTIMER_QUEUE_LENGTH"></a><strong>configTIMER_QUEUE_LENGTH</strong></h4><p>配置软件定时器命令队列的长度。</p><h4 id="configTIMER-TASK-STACK-DEPTH"><a href="#configTIMER-TASK-STACK-DEPTH" class="headerlink" title="configTIMER_TASK_STACK_DEPTH"></a><strong>configTIMER_TASK_STACK_DEPTH</strong></h4><p>配置软件定时器任务的栈空间大小</p><h4 id="断言配置"><a href="#断言配置" class="headerlink" title="断言配置"></a>断言配置</h4><p>STM32cubeMX生成的：</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119221818493.png" alt="image-20231119221818493"></p><p>后续可以根据需要进行修改。</p><p>中断相关：</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231119221837209.png" alt="image-20231119221837209"></p><p>configLIBRARY_LOWEST_INTERRUPT_PRIORITY：</p><p>配置中断最低优先级，通常为15(因为STM32的抢占式优先级最多设置为4bit，优先级最低只能设置为15)，此参数用于配置SysTick与PendSV。</p><p>configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY：</p><p>配置系统可管理的最高优先级，此参数用于配置BASEPRI寄存器。 如果设置为5，则优先级数值为0,1,2,3,4的中断是不受FreeRTOS管理的，不可被屏蔽，也不能调用FreeRTOS中的API接口函数，而中断优先级在5-15的中断受系统FreeRTOS管理，可以被屏蔽</p><h3 id="“INCLUDE-”开始的宏"><a href="#“INCLUDE-”开始的宏" class="headerlink" title="“INCLUDE_”开始的宏"></a>“INCLUDE_”开始的宏</h3><p>以“INCLUDE”开头的宏允许您的应用程序将未使用的实时内核组件从您的工程中移除， 这可节约嵌入式应用程序所需的任何 ROM 或 RAM。</p><p>每个宏都采用以下形式：</p><p>INCLUDE_FunctionName</p><p>其中 FunctionName 表示可以选择性地排除的 API 函数（或函数集）。</p><p>要包含 API 函数，请将宏设置为 1，要排除该函数，请将宏设置为 0。</p><p>例如：</p><p>要包含 vTaskDelete() API 函数，请使用：</p><p>#define INCLUDE_vTaskDelete 1</p><p>要从构建中排除 vTaskDelete()，请使用：</p><p>#define INCLUDE_vTaskDelete 0</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdwRMc6JkF8cJIOYwWQGTbLRvXF7xN7X8OVCEvm2cCj7zYaQnGwxVl0yl67UA8o6EYZmt3JWsaK9A/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>STM32cubeMX中的配置：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uY9kIGsoHZdwRMc6JkF8cJIOYwWQGTbLjaTGvpThgvEFygeUTDYA2rFj0SYoHRPJbB0tqhqnCDvBpeqiboDY5ug/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h2 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h2><h3 id="任务概念"><a href="#任务概念" class="headerlink" title="任务概念"></a>任务概念</h3><h4 id="任务的基本概念"><a href="#任务的基本概念" class="headerlink" title="任务的基本概念"></a>任务的基本概念</h4><p>从系统的角度看，任务是竞争系统资源的最小运行单元。</p><p>FreeRTOS是一个支持多任务的操作系统，在FreeRTOS中，任务可以使用或等待CPU、使用内存空间等系统资源，并独立于其他任务运行。</p><p>每个任务在自己的环境中运行，在任何时刻，只有一个任务得到运行，FreeRTOS调度器决定运行哪个任务。调度器会不断的启动、停止每一个任务，宏观上看，所有的任务都在同时进行。</p><p>在FreeRTOS中，每个任务都有自己的栈空间(一段连续的内存)，用于保存任务运行环境。任务越多，需要的栈空间就越大，而一个系统能运行多少个任务，取决于系统可用的内存。</p><p>任务通常会运行在一个死循环中，不会退出，如果不需要某个任务，可以调用FreeRTOS中的删除任务API函数将任务删除，释放系统资源。</p><h4 id="任务状态的概念"><a href="#任务状态的概念" class="headerlink" title="任务状态的概念"></a>任务状态的概念</h4><p>FreeRTOS系统中的任务有四种状态：</p><p><strong>Running—运行态</strong></p><p>当任务处于实际运行时被称之为运行态，即 CPU 的使用权被这个任务占用。</p><p><strong>Ready—就绪态</strong></p><p>处于就绪态的任务是指那些能够运行（没有被阻塞和挂起），但是当前没有运行的任务，因为同优先级或更高优先级的任务正在运行。</p><p><strong>Blocked—阻塞态</strong></p><p>由于等待信号量，消息队列，事件标志组等而处于的状态被称之为阻塞态，另外任务调用延迟函数也会处于阻塞态。</p><p><strong>Suspended—挂起态</strong></p><p>类似阻塞态，通过调用函数 vTaskSuspend()对指定任务进行挂起，挂起后这个任务将不被执行，只有调用函数 xTaskResume()才可以将这个任务从挂起态恢复。</p><h4 id="任务状态的切换"><a href="#任务状态的切换" class="headerlink" title="任务状态的切换"></a>任务状态的切换</h4><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/640" alt="图片"></p><h3 id="系统启动与空闲任务"><a href="#系统启动与空闲任务" class="headerlink" title="系统启动与空闲任务"></a>系统启动与空闲任务</h3><h4 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h4><p>使用如下函数启动 FreeRTOS调度： </p><p>vTaskStartScheduler();</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/7e93203d7ea3edc486397d8740765a49.png" alt="图片"></p><p>启动函数介绍：</p><p>函数原型：</p><p>void vTaskStartScheduler( void );</p><p>函数描述：函数 vTaskStartScheduler 用于启动 FreeRTOS 调度器，即启动 FreeRTOS 的多任务执行。</p><p>使用这个函数要注意以下几个问题：</p><p>\1. 空闲任务和可选的定时器任务是在调用这个函数后自动创建的。</p><p>\2. 正常情况下这个函数是不会返回的。如果有返回，极有可能是用于定时器任务或者空闲任务的内存空间不足造成创建失败，此时需要加大FreeRTOS可管理的内存空间。</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121120224.png" alt="图片"></p><p>2、空闲任务</p><p>空闲任务是FreeRTOS系统中没有其它任务运行时自动进入的系统任务，不需要用户创建，启用调度器时，调度器会自动创建空闲任务。</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121120351.png" alt="图片"></p><p>空闲任务的作用：</p><p>① 执行删除任务时，系统并不会立即释放任务的内存空间，只会将任务添加到结束列表中，真正的系统资源回收工作在空闲任务中完成。</p><p>②可以在空闲任务中实现低功耗功能，后续会详细讲解。</p><h3 id="任务创建"><a href="#任务创建" class="headerlink" title="任务创建"></a>任务创建</h3><p>创建任务的方式：</p><p>① 静态创建任务，xTaskCreateStatic()，需要自行定义任务栈空间与任务控制块，一般不采用，不作介绍。</p><p>②动态创建任务，xTaskCreate()，系统动态分配任务栈空间与任务控制块，应用采用此方式。</p><p>动态创建任务函数详解：</p><p><strong>函数原型：</strong></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121120517.webp" alt="图片"></p><p><strong>函数描述：</strong></p><p>函数 xTaskCreate 用于实现 FreeRTOS 操作系统的任务创建，并且还可以自定义任务栈的大小。</p><p> 第 一 个参数填创建任务的函数名</p><p> 第 二 个参数是任务名，这个参数主要用于调试的时候方便看是哪个任务</p><p> 第 三 个参数是任务栈大小，单位 word，也就是 4 字节</p><p> 第 四 个参数是创建的任务函数的形参</p><p> 第 五 个参数是定义任务优先级</p><p> 第 六 个参数是任务句柄，用于区分不同的任务</p><p><strong>使用举例：</strong></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121120716.webp" alt="图片"></p><p><strong>STM32cubeMX创建方法：</strong></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121120912.webp" alt="图片"></p><p>方法详解：</p><p>① 首先利用宏定义定义任务参数结构体变量</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121121607.webp" alt="图片"></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121121701.webp" alt="图片"></p><p>#name：将name转化为字符串，等效于”name”</p><p>os_thread_def__name:将name以字符串方式拼接，等效于”os_thread_def_name”</p><p>① 调用动态创建函数创建任务，形参为上面的结构体地址</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121121733.webp" alt="图片"></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121121858.webp" alt="图片"></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121121925.webp" alt="图片"></p><h3 id="任务删除"><a href="#任务删除" class="headerlink" title="任务删除"></a>任务删除</h3><p>删除任务函数详解：</p><p><strong>函数原型：</strong></p><p>void vTaskDelete( TaskHandle_t xTask );  /<em> 任务句柄 </em>/ </p><p><strong>函数描述：</strong></p><p>函数 vTaskDelete 用于实现 FreeRTOS 操作系统的任务删除。 </p><p> 第 1 个参数填要删除任务的句柄</p><p>使用这个函数要注意以下问题：</p><p>① 使用此函数需要在 FreeRTOSConfig.h 配置文件中配置如下宏定义为 1#define INCLUDE_vTaskDelete 1</p><p>② 如果用往此函数里面填的任务 ID 是 NULL，即数值 0 的话，那么删除的就是当前正在执行的任务，此任务被删除后，FreeRTOS 会切换到任务就绪列表里面下一个要执行的最高优先级任务。</p><p>③ 在 FreeRTOS 中，创建任务所需的内存需要在空闲任务中释放，如果用户在 FreeRTOS 中调用了这个函数的话，一定要让空闲任务有执行的机会，否则这块内存是无法释放的。另外，创建的这个任务在使用中申请了动态内存，这个内存不会因为此任务被删除而删除，这一点要注意，一定要在删除前将此内存释放。</p><p><strong>使用举例：</strong></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121121955.webp" alt="图片"></p><h3 id="任务挂起"><a href="#任务挂起" class="headerlink" title="任务挂起"></a>任务挂起</h3><p>挂起任务函数详解：</p><p><strong>函数原型：</strong></p><p>void vTaskSuspend( TaskHandle_t xTaskToSuspend); /<em> 任务句柄 </em>/ </p><p><strong>函数描述：</strong></p><p>函数 vTaskSuspend 用于实现 FreeRTOS 操作系统的任务挂起。 </p><p> 第 1 个参数填要挂起任务的句柄</p><p>使用这个函数要注意以下问题：</p><p>① 使用此函数需要在 FreeRTOSConfig.h 配置文件中配置如下宏定义为 1#define INCLUDE_vTaskSuspend 1</p><p>② 如果用往此函数里面填的任务 ID 是 NULL，即数值 0 的话，那么挂起的就是当前正在执行的任务，此任务被挂起后，FreeRTOS 会切换到任务就绪列表里面下一个要执行的高优先级任务。</p><p>③ 多次调用此函数的话，只需调用一次 vTaskResume 即可将任务从挂起态恢复。</p><p><strong>使用举例：</strong></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122008.webp" alt="图片"></p><h3 id="任务恢复-普通方式与中断方式"><a href="#任务恢复-普通方式与中断方式" class="headerlink" title="任务恢复(普通方式与中断方式)"></a>任务恢复(普通方式与中断方式)</h3><p>普通方式恢复任务函数详解：</p><p><strong>函数原型：</strong></p><p>void vTaskResume( TaskHandle_t xTaskToResume); /<em> 任务句柄 </em>/ </p><p><strong>函数描述：</strong></p><p>函数 vTaskResume 用于实现 FreeRTOS 操作系统的任务挂起</p><p> 第 1 个参数填要恢复任务的句柄</p><p>使用这个函数要注意以下问题：</p><p>① 使用此函数需要在 FreeRTOSConfig.h 配置文件中配置如下宏定义为 1#define INCLUDE_vTaskSuspend 1</p><p>② 多次调用函数 vTaskSuspend 的话，只需调用一次 vTaskResume 即可将任务从挂起态恢复。</p><p>③ 此函数是用于任务代码中调用的，故不可以在中断服务程序中调用此函数，中断服务程序中使用的xTaskResumeFromISR()，以后缀 FromISR 结尾。</p><p><strong>使用举例：</strong></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122026.webp" alt="图片"></p><p>中断方式恢复任务函数详解：</p><p><strong>函数原型：</strong></p><p>void vTaskResumeFromISR( TaskHandle_t xTaskToResume); /<em> 任务句柄 </em>/ </p><p><strong>函数描述：</strong></p><p>函数 vTaskResumeFromISR 用于实现 FreeRTOS 操作系统的任务恢复。</p><p> 第 1 个参数填要恢复任务的句柄</p><p>使用这个函数要注意以下问题：</p><p>① 使用此函数需要在 FreeRTOSConfig.h 配置文件中配置如下宏定义为 1#define INCLUDE_xResumeFromISR 1</p><p>② 多次调用函数 vTaskSuspend 的话，只需调用一次 vTaskResumeFromISR 即可将任务从挂起态恢复。</p><p>③ 如果用户打算采用这个函数实现中断与任务的同步，要注意一种情况，如果此函数的调用优先于函数vTaskSuspend 被调用，那么此次同步会丢失，这种情况下建议使用信号量来实现同步。</p><ol><li>此函数是用于中断服务程序中调用的，故不可以在任务中使用此函数，任务中使用的是 vTaskResume。</li></ol><p><strong>使用举例：</strong></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122030.webp" alt="图片"></p><h3 id="任务管理编程"><a href="#任务管理编程" class="headerlink" title="任务管理编程"></a>任务管理编程</h3><p>1、STM32cubeMX初始化</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122034.webp" alt="图片"></p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122039.webp" alt="图片"></p><p>说明：按键任务手动创建。</p><p>2、文件结构如下</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122043.webp" alt="图片"></p><p>3、程序功能</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122048.webp" alt="图片"></p><p>4、按键结构体</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122051.webp" alt="图片"></p><p>5、按键检测函数</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122055.webp" alt="图片"></p><p>6、创建按键任务</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122059.webp" alt="图片"></p><p>7、按键任务执行函数</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231121122104.webp" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/2023/11/20/Android/"/>
      <url>/2023/11/20/Android/</url>
      
        <content type="html"><![CDATA[<h2 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h2><p>先随便学学了解一下，主要是为了期末考试，但是后面做手机程序控制单片机也能用到，后期用到在认真学吧</p><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>layout_width</td><td>组件的宽度</td></tr><tr><td>layout_height</td><td>组件的高度</td></tr><tr><td>id</td><td>为TextView设置一个组件id</td></tr><tr><td>text</td><td>设置显示的文本内容</td></tr><tr><td>textColor</td><td>设置字体颜色</td></tr><tr><td>textStyle</td><td>设置字体风格，三个可选值: normal(无效果) bold(加粗) italic(斜体）</td></tr><tr><td>textSize</td><td>字体大小，单位一般是用sp</td></tr><tr><td>background</td><td>控件的背景颜色，可以理解为填充整个控件的颜色，可以是图片</td></tr><tr><td>gravityr</td><td>设置控件中因容的对齐方向，TextView中是文字，lmageView中是图片等等</td></tr><tr><td>layout_marginLeft</td><td>左对齐</td></tr></tbody></table></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>  <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;italic&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件定义"><a href="#文件定义" class="headerlink" title="文件定义"></a>文件定义</h4><h5 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h5><p>颜色在这里自己定义</p><p>十六进制的前缀，前边的两个ff表示颜色的透明度，范围为00～ff，其中00表示全透明，ff表示不透明。后面的六位ff00ff表示颜色色值。表示颜色的三原色蓝绿红，请注意颜色表示一定是八位的十六进制数字。请大家理解其中八位数字各自的含义。</p><div class="table-container"><table><thead><tr><th>透明度</th><th>对应十六进制</th></tr></thead><tbody><tr><td>100%</td><td>ff</td></tr><tr><td>90%</td><td>e6</td></tr><tr><td>85%</td><td>d9</td></tr><tr><td>80%</td><td>cc</td></tr><tr><td>70%</td><td>b3</td></tr><tr><td>60%</td><td>99</td></tr><tr><td>50%</td><td>80</td></tr><tr><td>40%</td><td>66</td></tr><tr><td>30%</td><td>4d</td></tr><tr><td>20%</td><td>33</td></tr><tr><td>15%</td><td>26</td></tr><tr><td>10%</td><td>1a</td></tr><tr><td>5%</td><td>0d</td></tr><tr><td>0%</td><td>00</td></tr></tbody></table></div><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/image-20230919170230054.webp" alt=""></p><h5 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h5><p>字体文件在这里定义</p><p><img src="https://blogblog-1322568013.cos.ap-guangzhou.myqcloud.com/image/2.webp" alt=""></p><p>可以看到预览效果是这样的</p><p><img src="C:\Users\Y\Pictures\Camera Roll\2.png" alt="image-20230919172554218"></p><p>但是这里获取了id后，运行会覆盖掉之前设置的文本</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20230919172617772.png" alt="image-20230919172617772"></p><p>代码效果</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20230919172741153.png" alt="image-20230919172741153"></p><h4 id="带阴影的TextView"><a href="#带阴影的TextView" class="headerlink" title="带阴影的TextView"></a>带阴影的TextView</h4><p>==<strong>android:shadowColor</strong>==:设置阴影颜色,需要与shadowRadius一起使用<br><strong>==android:shadowRadius==</strong>:设置阴影的模糊程度,设为0.1就变成字体颜色了,建议使用3.0<br><strong>==android:shadowDx==</strong> :设置阴影在水平方向的偏移,就是水平方向阴影开始的横坐标位置<br>==<strong>android:shadowDy</strong>== :设置阴影在竖直方向的偏移,就是竖直方向阴影开始的纵坐标位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;italic&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:shadowRadius</span>=<span class="string">&quot;3.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">   /&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20230919174550907.png" alt="image-20230919174550907"></p><h4 id="跑马灯效果的TextView"><a href="#跑马灯效果的TextView" class="headerlink" title="跑马灯效果的TextView"></a>跑马灯效果的TextView</h4><p>android:singleLine:内容单行显示<br>android:focusable:是否可以获取焦点<br>android:focusablelnTouchMode:用于控制视图在触摸模式下是否可以聚焦<br>android:ellipsize:在哪里省略文本<br>android:marqueeRepeatLimit:字幕动画重复的次数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;@string/tv_one&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:textStyle</span>=<span class="string">&quot;italic&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:shadowColor</span>=<span class="string">&quot;@color/red&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:shadowRadius</span>=<span class="string">&quot;3.0&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:shadowDx</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:shadowDy</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:ellipsize</span>=<span class="string">&quot;marquee&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">&quot;marquee_forever&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
